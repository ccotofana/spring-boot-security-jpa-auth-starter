

# Logs DDL to console on startup
# Not for production use
# Does not execute DDL scripts
spring.jpa.generate-ddl=true

spring.jpa.show-sql=true

# Whether Hibernate (default JPA provider) should automatically CRUD DDL.
# Specifies the behavior of Hibernate's schema generation and migration tool
# Use "validate" value in production
# Values:
#   create: Hibernate creates the database schema from scratch on startup, dropping any existing tables and data.
#   create-drop: Hibernate creates the database schema on startup, but drops it when the application shuts down.
#   update: Hibernate updates the database schema to match the entity classes in your application. It creates new tables and columns as necessary, but does not delete or modify existing data.
#   validate: Hibernate validates the database schema against the entity classes in your application, but does not create or modify any tables or data.
#   none: Hibernate does not perform any schema generation or migration, and assumes that the database schema already exists and is up-to-date.
#
#  This property is intended for use during development and testing, and should not be used in production environments
spring.jpa.hibernate.ddl-auto=validate

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver

# Postgres does not allow specifying default schema in URL
spring.datasource.url=jdbc:postgresql://${MY_DB_HOST}:${MY_DB_PORT}/${MY_DB_NAME}
spring.datasource.username=${MY_DB_USER}
spring.datasource.password=${MY_DB_PASSWORD}
# With HikariDataSource, spring.jpa.properties.hibernate.default_schema is ignored
spring.datasource.hikari.schema=${MY_DB_SCHEMA}
